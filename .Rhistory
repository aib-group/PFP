kegg_edges1 <-  lapply(X = seq_len(length(kegg_edges1)), function(x)data.frame(source=kegg_edges1[[x]][,1],target=kegg_edges1[[x]][,2],correlation=rep(names(kegg_edges)[x],nrow(kegg_edges1[[x]])),edge_type=rep("kegg",nrow(kegg_edges1[[x]]))))
View(kegg_edges1)
edges_kegg <- do.call(rbind,kegg_edges1)
View(edges_kegg)
# 将单个数据进行合并
combine_data <- function(ep_root,file_names){
data <- read.table(paste0(ep_root,"/",file_names[1]))
colnames(data) <- c("genenames",unlist(strsplit(file_names[1],split = "\\."))[1])
data[["genenames"]] <- as.vector(sapply(X = c(t(data[1])),FUN=function(x)unlist(strsplit(x,split = "\\."))[1]))
for (file in file_names[2:length(file_names)]){
data0 <- read.table(paste0(ep_root,"/",file))
colnames(data0) <- c("genenames",unlist(strsplit(file,split = "\\."))[1])
data0[["genenames"]] <- as.vector(sapply(X = c(t(data0[1])),FUN=function(x)unlist(strsplit(x,split = "\\."))[1]))
# print(c(file,nrow(data0)))
data <- merge(x = data,y = data0,by = "genenames",all.x = F,all.y = F)
}
data <- data[!(data[,1] %in% c("__alignment_not_unique","__ambiguous","__no_feature","__not_aligned","__too_low_aQual")),]
data <- data[!duplicated(data[,1]),]
# write.csv(x = data,file = "data/rnaseq/total.csv",row.names = F)
}
# count数据转换为tpm数据
tpm_trans <- function(data,exons_gene_lens){
colnames(data) <- c("genenames",colnames(data)[2:ncol(data)])
data_com2 <- merge(data,exons_gene_lens,by="genenames")
data_std <- list()
data_std[["genenames"]] <- data_com2[["genenames"]]
sum0 <- sum()
for (j in 2:(ncol(data_com2)-1)){
sum0 <- sum(as.vector(unlist(data_com2[,j]))/as.vector(unlist(data_com2[,length(data_com2)])))
data_std[[colnames(data_com2)[j]]] <- as.vector(unlist(data_com2[,j]))/as.vector(unlist(data_com2[,length(data_com2)]))/sum0*1000000
}
data_std <- data.frame(data_std)
rownames(data_std) <- 1:nrow(data_std)
return(data_std)
}
# 对数据进行清理，表达量阈值，gene_id丢弃
gene_clean <- function(data_std,clean_thresh,gene_id_type,gene_info_db){
data_std <- data_std[rowMeans(data_std[,2:ncol(data_std)])>clean_thresh,]
colnames(data_std) <- c(gene_id_type,colnames(data_std)[2:ncol(data_std)])
if (gene_id_type=="ENTREZID"){
colnames(data_std) <- c("ENTREZID",colnames(data_std)[2:ncol(data_std)])
}else{
gene_names <- data_std[,1]
gene_n <- bitr(as.vector(gene_names),fromType = gene_id_type,
toType = "ENTREZID",#"ENSEMBL"
OrgDb = gene_info_db,drop=T)
gene_n <- gene_n[!duplicated(gene_n[,1]),]
gene_n <- gene_n[!duplicated(gene_n[,2]),]
data_std <- merge(x = data_std,y = gene_n,by=gene_id_type,all.y=T)
rownames(data_std) <- data_std[["ENTREZID"]]
data_std <- data_std[,c("ENTREZID",colnames(data_std)[2:(ncol(data_std)-1)])]
}
return(data_std)
}
data1 <- combine_data(ep_root0,file_names0)
species0 = "mmu"
gene_list0 = unlist(strsplit(x = "101488143|15129|15122|110257|14102",split = "\\|"))
gene_id_type0 = "ENSEMBL" # ENTREZID等
if_or_not0 = 1 # 1/0
coeff_top_num0 = 10 # 相关性前n
seq_method0 = "rnaseq" # "rnaseq" # 测序方法
clean_thresh0 = 0.1 # 数据清洗阈值
ep_root0 = "data/rnaseq/count" # "rnaseq" #  文件路径
file_names0 =  list.files("data/rnaseq/count")# D0001_mmu_Brain_0_0_1_hisat2_count.txt|D0001_mmu_Brain_0_0_2_hisat2_count.txt|D0001_mmu_Brain_0_0_3_hisat2_count.txt 表达谱文件名称，多个以|间隔
root_select0 = "" #自选样本集,集成文件.if_or_not0=0的时候选择
task_id0 = 1 # 任务id号
# 创建结果路径
if(!dir.exists(paste0("result/",task_id0))){
dir.create(paste0("result/",task_id0))
}
if(!dir.exists(paste0("result/",task_id0,"/net"))){
dir.create(paste0("result/",task_id0,"/net"))
}
if (species0=="hsa"){
library("org.Hs.eg.db")
gene_info_db <- org.Hs.eg.db
load(file = paste0("RData/hsa_kegg_info.RData"))
}else if (species0=="mmu"){
library("org.Mm.eg.db")
gene_info_db <- org.Mm.eg.db
load(file = paste0("RData/mmu_kegg_info.RData"))
}
if (species0=="hsa"){
library("org.Hs.eg.db")
gene_info_db <- org.Hs.eg.db
}else if (species0=="mmu"){
library("org.Mm.eg.db")
gene_info_db <- org.Mm.eg.db
}
data1 <- combine_data(ep_root0,file_names0)
ep_root0 = "/home/zx/文档/drug_database/data/rnaseq/count" # "rnaseq" #  文件路径
file_names0 =  list.files("/home/zx/文档/drug_database/data/rnaseq/count")# D0001_mmu_Brain_0_0_1_hisat2_count.txt|D0001_mmu_Brain_0_0_2_hisat2_count.txt|D0001_mmu_Brain_0_0_3_hisat2_count.txt 表达谱文件名称，多个以|间隔
root_select0 = "" #自选样本集,集成文件.if_or_not0=0的时候选择
task_id0 = 1 # 任务id号
data1 <- combine_data(ep_root0,file_names0)
# tpm标准化
load("/home/zx/文档/drug_database/code/trans_tpm/exons_gene_lens/exons_gene_lens.RData")
if (seq_method0=="rnaseq"){
data1 <- tpm_trans(data1,exons_gene_lens)
}
# 数据清理
data_std1 <- gene_clean(data_std = data1,clean_thresh = clean_thresh0,gene_id_type = gene_id_type0,gene_info_db = gene_info_db)
edges_coeff1 <- coeff_top_num(gene_list,data_std1,num=coeff_top_num0)
# 选取相关性最高的num个基因
get_exp_cor_edges <- function(gene_list,data_std,method="spearman",num){
bg_genelist <- rownames(data_std)
match_list <- match(x = gene_list,table = bg_genelist,nomatch = 0)
if (sum(match_list==0)){
stop("gene_list must have common elements with rownames of data_std, maybe the gene id types you choose in the two data set are not consistent.")
}else if(sum(match_list!=0)<length(match_list)){
print("Some genes in gene_list can't be found in data_std. These genes will be removed.")
print(gene_list[match_list==0])
gene_list <- gene_list[match_list!=0]
}
get_gene_cor <- function(gene,data_std,method,num){
cor_list <- vapply(X =rownames(data_std),FUN = function(name0)cor(x = unlist(data_std[gene,2:ncol(data_std)]),y = unlist(data_std[name0,2:ncol(data_std)]),method = method),0)
cor_list <- cor_list[order(abs(cor_list),decreasing = T)]
cor_data_frame <- data.frame(source=rep(x = gene,num),target=names(cor_list)[2:(num+1)],correlation=cor_list[2:(num+1)])
}
edges_coeff_list <- lapply(X = gene_list,FUN = get_gene_cor, data_std,method,num)
edges_coeff <- do.call(rbind,edges_coeff_list)
edges_coeff2 <- data.frame(source=edges_coeff$target,target=edges_coeff$source,correlation=edges_coeff$correlation)
delete_row <- lapply(X = seq_len(nrow(edges_coeff)),
FUN = function(x)seq_len(nrow(edges_coeff))[edges_coeff[x,1]==edges_coeff2[,1] & edges_coeff[x,2]==edges_coeff2[,2]])
delete_row <- lapply(X = seq_len(length(delete_row)),function(x)delete_row[[x]]>x)
names(delete_row) <- seq_len(nrow(edges_coeff))
delete_row <- unlist(delete_row)
delete_row <- delete_row[delete_row==TRUE]
delete_row <- as.numeric(names(delete_row))
if (length(delete_row)!=0){
edges_coeff <- edges_coeff[-delete_row,]
}
rownames(edges_coeff) <- 1:nrow(edges_coeff)
edges_coeff[["edge_type"]] <- rep("coexp",nrow(edges_coeff))
return(edges_coeff)
}
edges_coeff1 <- coeff_top_num(gene_list,data_std1,num=coeff_top_num0)
edges_coeff1 <- get_exp_cor_edges(gene_list,data_std1,num=coeff_top_num0)
View(edges_coeff1)
edges_coexp <- edges_coeff1
delete_row <- apply(X = seq_len(nrow(edges_coexp)),MARGIN = 1,FUN = function(x)(sum(edges_coexp[x,1]==edges_kegg[,1]+edges_coexp[x,2]==edges_kegg[,2])>0)*x)
delete_row <- apply(X = seq_len(nrow(edges_coexp)),MARGIN = 1,FUN = function(x)(sum((edges_coexp[x,1]==edges_kegg[,1])+(edges_coexp[x,2]==edges_kegg[,2]))>0)*x)
nrow(edges_coexp)
delete_row <- vapply(X = seq_len(nrow(edges_coexp)),FUN = function(x)(sum((edges_coexp[x,1]==edges_kegg[,1])+(edges_coexp[x,2]==edges_kegg[,2]))>0)*x,0)
delete_row
edges_coexp_new <- edges_coexp[delete_row!=0,]
View(edges_coexp_new)
gene_select <- unique(edges_coexp$source)
gene_correlation <- setdiff(unique(c(edges_coexp$source),c(edges_coexp$target)),gene_select)
gene_correlation <- setdiff(unique(c(edges_coexp$source,edges_coexp$target)),gene_select)
delete_row <- vapply(X = seq_len(nrow(edges_coexp)),
FUN = function(x)(sum((edges_coexp[x,1]==edges_kegg[,1])+(edges_coexp[x,2]==edges_kegg[,2]))>0)*x,0)
edges_coexp_new <- edges_coexp[delete_row!=0,]
gene_correlation <- setdiff(unique(c(edges_coexp_new$source,edges_coexp_new$target)),gene_select)
gene_select <- unique(edges_coexp$source)
delete_row <- vapply(X = seq_len(nrow(edges_coexp)),
FUN = function(x)(sum((edges_coexp[x,1]==edges_kegg[,1])&(edges_coexp[x,2]==edges_kegg[,2])|(edges_coexp[x,1]==edges_kegg[,2])&(edges_coexp[x,2]==edges_kegg[,1]))>0)*x,
0)
delete_row
edges_coexp_new <- edges_coexp[delete_row!=0,]
(edges_coexp[x,1]==edges_kegg[,1])&(edges_coexp[x,2]==edges_kegg[,2])
(edges_coexp[x,1]==edges_kegg[,2])&(edges_coexp[x,2]==edges_kegg[,1])
(edges_coexp[x,1]==edges_kegg[,1])&(edges_coexp[x,2]==edges_kegg[,2])|(edges_coexp[x,1]==edges_kegg[,2])&(edges_coexp[x,2]==edges_kegg[,1])
sum((edges_coexp[x,1]==edges_kegg[,1])&(edges_coexp[x,2]==edges_kegg[,2])|(edges_coexp[x,1]==edges_kegg[,2])&(edges_coexp[x,2]==edges_kegg[,1]))>0
sum((edges_coexp[x,1]==edges_kegg[,1])&(edges_coexp[x,2]==edges_kegg[,2])|(edges_coexp[x,1]==edges_kegg[,2])&(edges_coexp[x,2]==edges_kegg[,1]))>0)*x
sum((edges_coexp[x,1]==edges_kegg[,1])&(edges_coexp[x,2]==edges_kegg[,2])|(edges_coexp[x,1]==edges_kegg[,2])&(edges_coexp[x,2]==edges_kegg[,1]))>0)
x
(sum((edges_coexp[x,1]==edges_kegg[,1])&(edges_coexp[x,2]==edges_kegg[,2])|(edges_coexp[x,1]==edges_kegg[,2])&(edges_coexp[x,2]==edges_kegg[,1]))>0)*x
delete_row <- vapply(X = seq_len(nrow(edges_coexp)),
FUN = function(x)(sum((edges_coexp[x,1]==edges_kegg[,1])&(edges_coexp[x,2]==edges_kegg[,2])|(edges_coexp[x,1]==edges_kegg[,2])&(edges_coexp[x,2]==edges_kegg[,1]))>0)*x,
0)
delete_row
edges_coexp_new <- edges_coexp[delete_row==0,]
genes_coexp_new <- unique(c(edges_coexp_$source,edges_coexp_new$target))
genes_coexp_new <- unique(c(edges_coexp$source,edges_coexp_new$target))
unique(c(edges_kegg$source,edges_coexp$target))
genes_coexp <- setdiff(genes_coexp_new,gene_select)
gene_kegg <- setdiff(unique(c(edges_kegg$source,edges_coexp$target)),genes_coexp)
View(PFPRefnet)
genes_kegg <- setdiff(unique(c(edges_kegg$source,edges_coexp$target)),genes_coexp)
View(PFPRefnet)
# 选取相关性最高的num个基因
get_exp_cor_edges <- function(gene_list,data_std,method="spearman",num){
bg_genelist <- rownames(data_std)
match_list <- match(x = gene_list,table = bg_genelist,nomatch = 0)
if (sum(match_list==0)){
stop("gene_list must have common elements with rownames of data_std, maybe the gene id types you choose in the two data set are not consistent.")
}else if(sum(match_list!=0)<length(match_list)){
print("Some genes in gene_list can't be found in data_std. These genes will be removed.")
print(gene_list[match_list==0])
gene_list <- gene_list[match_list!=0]
}
get_gene_cor <- function(gene,data_std,method,num){
cor_list <- vapply(X =rownames(data_std),FUN = function(name0)cor(x = unlist(data_std[gene,2:ncol(data_std)]),y = unlist(data_std[name0,2:ncol(data_std)]),method = method),0)
cor_list <- cor_list[order(abs(cor_list),decreasing = T)]
cor_data_frame <- data.frame(source=rep(x = gene,num),target=names(cor_list)[2:(num+1)],weight=cor_list[2:(num+1)])
}
edges_coeff_list <- lapply(X = gene_list,FUN = get_gene_cor, data_std,method,num)
edges_coeff <- do.call(rbind,edges_coeff_list)
edges_coeff2 <- data.frame(source=edges_coeff$target,target=edges_coeff$source,weight=edges_coeff$weight)
delete_row <- lapply(X = seq_len(nrow(edges_coeff)),
FUN = function(x)seq_len(nrow(edges_coeff))[edges_coeff[x,1]==edges_coeff2[,1] & edges_coeff[x,2]==edges_coeff2[,2]])
delete_row <- lapply(X = seq_len(length(delete_row)),function(x)delete_row[[x]]>x)
names(delete_row) <- seq_len(nrow(edges_coeff))
delete_row <- unlist(delete_row)
delete_row <- delete_row[delete_row==TRUE]
delete_row <- as.numeric(names(delete_row))
if (length(delete_row)!=0){
edges_coeff <- edges_coeff[-delete_row,]
}
rownames(edges_coeff) <- 1:nrow(edges_coeff)
edges_coeff[["pathway"]] <- rep("uncertain",nrow(edges_coeff))
edges_coeff[["edge_type"]] <- rep("coexp",nrow(edges_coeff))
return(edges_coeff)
}
get_bg_related_kegg <- function(gene_list,PFPRefnet){
if (sum(is.na(as.numeric(gene_list))) > 0)
stop("You should translate all your gene ids into ENTREZID!")
kegg_edges <- lapply(X = network(PFPRefnet),getEdgeList)
data_tf <- llply(kegg_edges,function(kegg_edge)apply(X=kegg_edge,MARGIN=1, FUN=function(x)((x[1] %in% gene_list) | (x[2] %in% gene_list))))
kegg_edges1 <- lapply(X = names(kegg_edges), function(x)kegg_edges[[x]][data_tf[[x]],])
kegg_edges1 <-  lapply(X = seq_len(length(kegg_edges1)), function(x)data.frame(source=kegg_edges1[[x]][,1],target=kegg_edges1[[x]][,2],weight=rep(0.5,nrow(kegg_edges1[[x]])),pathway=rep(names(kegg_edges)[x],nrow(kegg_edges1[[x]])),edge_type=rep("kegg",nrow(kegg_edges1[[x]]))))
edges_kegg <- do.call(rbind,kegg_edges1)
}
library(igraph)
View(PFPRefnet)
?match
genes_kegg <- setdiff(unique(c(edges_kegg$source,edges_coexp$target)),genes_coexp)
asso_net_edges <- rbind(edges_coexp_new,edges_kegg)
write.csv(x = asso_net_edges,file = paste0(file_dir,"/","asso_net_edges.csv"))
asso_net_nodes <- unique(c(asso_net_edges$source,asso_net_edges$target))
asso_net_nodes1 <- lapply(X = asso_net_nodes,function(x)match(asso_net_edges$source[match(x,asso_net_edges$source)],asso_net_nodes))
View(asso_net_nodes1)
asso_net_nodes1 <- lapply(X = asso_net_nodes,function(x)match(asso_net_edges$target[match(x,asso_net_edges$source)],asso_net_nodes))
View(asso_net_nodes1)
asso_net_nodes1 <- as.list(asso_net_nodes)
View(asso_net_nodes1)
names(asso_net_nodes) <- asso_net_nodes
asso_net_nodes1 <- lapply(X = asso_net_nodes,function(x)match(asso_net_edges$target[match(x,asso_net_edges$source)],asso_net_nodes))
View(asso_net_nodes1)
write.csv(x = asso_net_edges,file = paste0("/home/zx/文档","/","asso_net_edges.csv"))
unique(asso_net_edges$source)
asso_net_nodes1 <- lapply(X = asso_net_edges$source,function(x)match(asso_net_edges$target[match(x,asso_net_edges$source)],asso_net_nodes))
asso_net_nodes <- lapply(X = asso_net_nodes,function(x)match(asso_net_edges$target[match(x,asso_net_edges$source)],asso_net_nodes))
View(asso_net_nodes1)
# write.csv(x = asso_net_edges,file = paste0(file_dir,"/","asso_net_edges.csv"))
asso_net_nodes <- unique(c(asso_net_edges$source,asso_net_edges$target))
names(asso_net_nodes) <- asso_net_nodes
asso_net_nodes1 <- lapply(X = asso_net_nodes,function(x)match(asso_net_edges$target[match(x,asso_net_edges$source)],asso_net_nodes))
View(asso_net_edges)
View(asso_net_nodes1)
asso_net_nodes[length(asso_net_nodes)]
asso_net <- new(Class = "graphNEL",nodes=asso_net_nodes,edgeL=asso_net_nodes1)
asso_net <- new(Class = "graphNEL",nodes=asso_net_nodes,edgeL=asso_net_nodes1,edgemode='directed')
View(PFPRefnet)
View(asso_net_nodes1)
asso_net_nodes1 <- lapply(X = asso_net_nodes,function(x)asso_net_edges$target[match(x,asso_net_edges$source)])
View(asso_net_nodes1)
asso_net_nodes1 <- lapply(X = asso_net_nodes,function(x)match(x,asso_net_edges$source))
View(asso_net_nodes1)
# 选取相关性最高的num个基因
get_exp_cor_edges <- function(gene_list,data_std,method="spearman",num){
bg_genelist <- rownames(data_std)
match_list <- match(x = gene_list,table = bg_genelist,nomatch = 0)
if (sum(match_list==0)){
stop("gene_list must have common elements with rownames of data_std, maybe the gene id types you choose in the two data set are not consistent.")
}else if(sum(match_list!=0)<length(match_list)){
print("Some genes in gene_list can't be found in data_std. These genes will be removed.")
print(gene_list[match_list==0])
gene_list <- gene_list[match_list!=0]
}
get_gene_cor <- function(gene,data_std,method,num){
cor_list <- vapply(X =rownames(data_std),FUN = function(name0)cor(x = unlist(data_std[gene,2:ncol(data_std)]),y = unlist(data_std[name0,2:ncol(data_std)]),method = method),0)
cor_list <- cor_list[order(abs(cor_list),decreasing = T)]
cor_data_frame <- data.frame(source=rep(x = gene,num),target=names(cor_list)[2:(num+1)],weight=cor_list[2:(num+1)])
}
edges_coeff_list <- lapply(X = gene_list,FUN = get_gene_cor, data_std,method,num)
edges_coeff <- do.call(rbind,edges_coeff_list)
edges_coeff2 <- data.frame(source=edges_coeff$target,target=edges_coeff$source,weight=edges_coeff$weight)
delete_row <- lapply(X = seq_len(nrow(edges_coeff)),
FUN = function(x)seq_len(nrow(edges_coeff))[edges_coeff[x,1]==edges_coeff2[,1] & edges_coeff[x,2]==edges_coeff2[,2]])
delete_row <- lapply(X = seq_len(length(delete_row)),function(x)delete_row[[x]]>x)
names(delete_row) <- seq_len(nrow(edges_coeff))
delete_row <- unlist(delete_row)
delete_row <- delete_row[delete_row==TRUE]
delete_row <- as.numeric(names(delete_row))
if (length(delete_row)!=0){
edges_coeff <- edges_coeff[-delete_row,]
}
rownames(edges_coeff) <- 1:nrow(edges_coeff)
edges_coeff[["pathway"]] <- rep("uncertain",nrow(edges_coeff))
edges_coeff[["edge_type"]] <- rep("coexp",nrow(edges_coeff))
return(edges_coeff)
}
load("/home/zx/文档/PFP/RData/PFPRefnet.RData")
get_bg_related_kegg <- function(gene_list,PFPRefnet){
if (sum(is.na(as.numeric(gene_list))) > 0)
stop("You should translate all your gene ids into ENTREZID!")
kegg_edges <- lapply(X = network(PFPRefnet),getEdgeList)
data_tf <- llply(kegg_edges,function(kegg_edge)apply(X=kegg_edge,MARGIN=1, FUN=function(x)((x[1] %in% gene_list) | (x[2] %in% gene_list))))
kegg_edges1 <- lapply(X = names(kegg_edges), function(x)kegg_edges[[x]][data_tf[[x]],])
kegg_edges1 <-  lapply(X = seq_len(length(kegg_edges1)), function(x)data.frame(source=kegg_edges1[[x]][,1],target=kegg_edges1[[x]][,2],weight=rep(0.5,nrow(kegg_edges1[[x]])),pathway=rep(names(kegg_edges)[x],nrow(kegg_edges1[[x]])),edge_type=rep("kegg",nrow(kegg_edges1[[x]]))))
edges_kegg <- do.call(rbind,kegg_edges1)
}
get_asso_net <- function(edges_coexp,edges_kegg,file_dir){
if (substr(file_dir,nchar(file_dir),nchar(file_dir)) == "/"){
file_dir <- substr(file_dir,1,(nchar(file_dir)-1))
}
gene_select <- unique(edges_coexp$source)
delete_row <- vapply(X = seq_len(nrow(edges_coexp)),
FUN = function(x)(sum((edges_coexp[x,1]==edges_kegg[,1])&(edges_coexp[x,2]==edges_kegg[,2])|(edges_coexp[x,1]==edges_kegg[,2])&(edges_coexp[x,2]==edges_kegg[,1]))>0)*x,
0)
edges_coexp_new <- edges_coexp[delete_row==0,]
genes_coexp_new <- unique(c(edges_coexp$source,edges_coexp_new$target))
genes_coexp <- setdiff(genes_coexp_new,gene_select)
genes_kegg <- setdiff(unique(c(edges_kegg$source,edges_coexp$target)),genes_coexp)
asso_net_edges <- rbind(edges_coexp_new,edges_kegg)
# write.csv(x = asso_net_edges,file = paste0(file_dir,"/","asso_net_edges.csv"))
asso_net_nodes <- unique(c(asso_net_edges$source,asso_net_edges$target))
names(asso_net_nodes) <- asso_net_nodes
asso_net_nodes1 <- lapply(X = asso_net_nodes,function(x)match(x,asso_net_edges$source,nomatch = 0))
asso_net_egL <-  lapply(X = asso_net_nodes1,FUN = function(x)list(edges=match(asso_net_edges$source[x],asso_net_nodes),weight = asso_net_edges$weight[x],pathway=asso_net_edges$pathway[x],edge_type=asso_net_edges$edge_type[x]))
asso_net <- new(Class = "graphNEL",nodes=asso_net_nodes,edgeL=asso_net_nodes1,edgemode='directed')
return(asso_net)
}
edges_coeff1 <- get_exp_cor_edges(gene_list,data_std1,num=coeff_top_num0)
# 获取kegg背景基因关系
edges_kegg1 <- get_edges_kegg(gene_list,kegg_edges)
# 获取kegg背景基因关系
edges_kegg1 <- get_bg_related_kegg(gene_list,kegg_edges)
View(PFPRefnet)
get_bg_related_kegg <- function(gene_list,PFPRefnet){
if (sum(is.na(as.numeric(gene_list))) > 0)
stop("You should translate all your gene ids into ENTREZID!")
kegg_edges <- lapply(X = PFPRefnet@network,getEdgeList)
data_tf <- llply(kegg_edges,function(kegg_edge)apply(X=kegg_edge,MARGIN=1, FUN=function(x)((x[1] %in% gene_list) | (x[2] %in% gene_list))))
kegg_edges1 <- lapply(X = names(kegg_edges), function(x)kegg_edges[[x]][data_tf[[x]],])
kegg_edges1 <-  lapply(X = seq_len(length(kegg_edges1)), function(x)data.frame(source=kegg_edges1[[x]][,1],target=kegg_edges1[[x]][,2],weight=rep(0.5,nrow(kegg_edges1[[x]])),pathway=rep(names(kegg_edges)[x],nrow(kegg_edges1[[x]])),edge_type=rep("kegg",nrow(kegg_edges1[[x]]))))
edges_kegg <- do.call(rbind,kegg_edges1)
}
# 获取kegg背景基因关系
edges_kegg1 <- get_bg_related_kegg(gene_list,kegg_edges)
?getEdgeList
dd <-network(PFPRefnet)
View(dd)
kegg_edges <- lapply(X = network(PFPRefnet),FUN = getEdgeList)
get_bg_related_kegg <- function(gene_list,PFPRefnet){
if (sum(is.na(as.numeric(gene_list))) > 0)
stop("You should translate all your gene ids into ENTREZID!")
kegg_edges <- lapply(X = network(PFPRefnet),FUN = getEdgeList)
data_tf <- llply(kegg_edges,function(kegg_edge)apply(X=kegg_edge,MARGIN=1, FUN=function(x)((x[1] %in% gene_list) | (x[2] %in% gene_list))))
kegg_edges1 <- lapply(X = names(kegg_edges), function(x)kegg_edges[[x]][data_tf[[x]],])
kegg_edges1 <-  lapply(X = seq_len(length(kegg_edges1)), function(x)data.frame(source=kegg_edges1[[x]][,1],target=kegg_edges1[[x]][,2],weight=rep(0.5,nrow(kegg_edges1[[x]])),pathway=rep(names(kegg_edges)[x],nrow(kegg_edges1[[x]])),edge_type=rep("kegg",nrow(kegg_edges1[[x]]))))
edges_kegg <- do.call(rbind,kegg_edges1)
}
# 获取kegg背景基因关系
edges_kegg1 <- get_bg_related_kegg(gene_list,kegg_edges)
get_bg_related_kegg <- function(gene_list,PFPRefnet){
if (sum(is.na(as.numeric(gene_list))) > 0)
stop("You should translate all your gene ids into ENTREZID!")
kegg_edges <- llply(X = network(PFPRefnet),FUN = getEdgeList)
data_tf <- llply(kegg_edges,function(kegg_edge)apply(X=kegg_edge,MARGIN=1, FUN=function(x)((x[1] %in% gene_list) | (x[2] %in% gene_list))))
kegg_edges1 <- lapply(X = names(kegg_edges), function(x)kegg_edges[[x]][data_tf[[x]],])
kegg_edges1 <-  lapply(X = seq_len(length(kegg_edges1)), function(x)data.frame(source=kegg_edges1[[x]][,1],target=kegg_edges1[[x]][,2],weight=rep(0.5,nrow(kegg_edges1[[x]])),pathway=rep(names(kegg_edges)[x],nrow(kegg_edges1[[x]])),edge_type=rep("kegg",nrow(kegg_edges1[[x]]))))
edges_kegg <- do.call(rbind,kegg_edges1)
}
# 获取kegg背景基因关系
edges_kegg1 <- get_bg_related_kegg(gene_list,kegg_edges)
get_bg_related_kegg <- function(gene_list,PFPRefnet){
if (sum(is.na(as.numeric(gene_list))) > 0)
stop("You should translate all your gene ids into ENTREZID!")
kegg_edges <- lapply(X = network(PFPRefnet),FUN = getEdgeList(x))
data_tf <- llply(kegg_edges,function(kegg_edge)apply(X=kegg_edge,MARGIN=1, FUN=function(x)((x[1] %in% gene_list) | (x[2] %in% gene_list))))
kegg_edges1 <- lapply(X = names(kegg_edges), function(x)kegg_edges[[x]][data_tf[[x]],])
kegg_edges1 <-  lapply(X = seq_len(length(kegg_edges1)), function(x)data.frame(source=kegg_edges1[[x]][,1],target=kegg_edges1[[x]][,2],weight=rep(0.5,nrow(kegg_edges1[[x]])),pathway=rep(names(kegg_edges)[x],nrow(kegg_edges1[[x]])),edge_type=rep("kegg",nrow(kegg_edges1[[x]]))))
edges_kegg <- do.call(rbind,kegg_edges1)
}
# 获取kegg背景基因关系
edges_kegg1 <- get_bg_related_kegg(gene_list,kegg_edges)
class(network(PFPRefnet))
gene_list = as.vector(read.csv(file = paste0("/home/zx/文档/drug_database/result/",1,"/diff/diff_sig.csv"),header = T)$gene)
#' @param gene_list, a vector of genes
#' @param gene_id_type, the type of gene ID
#' @details
#' @examples
#' \dontrun{
#' library(org.Mm.eg.db)
#' data(gene_list)
#' trans_id(gene_list,gene_id_type)
#' }
#' @export
trans_id <- function(gene_list,gene_id_type,gene_info_db){
gene_t <- gene_list
if (gene_id_type != "ENTREZID"){
gene_n <- bitr(gene_t,fromType = gene_id_type,
toType = "ENTREZID",#"ENSEMBL"
OrgDb = gene_info_db,drop = F)
gene_n <- gene_n[!duplicated(gene_n$ENSEMBL),]
}else{
gene_n <- data.frame(ENTREZID=gene_t)
}
return (gene_n)
}
gene_id_type = "ENSEMBL"
gene_info_db <- org.Mm.eg.db
library(org.Mm.eg.db)
gene_n <- trans_id(gene_list = gene_list,gene_id_type = gene_id_type0,gene_info_db = org.Mm.eg.db)
gene_id_type0 <- gene_id_type
gene_n <- trans_id(gene_list = gene_list,gene_id_type = gene_id_type0,gene_info_db = org.Mm.eg.db)
library(BioNet)
library(igraph)
library(plyr)
library("clusterProfiler") # 基因ID转换
gene_n <- trans_id(gene_list = gene_list,gene_id_type = gene_id_type0,gene_info_db = org.Mm.eg.db)
gene_list <- unique(gene_n$ENTREZID[!is.na(gene_n$ENTREZID)])[1:10]
save(list = "gene_list",file = "/home/zx/文档/kangqichuang/PFP/data/gene_list.RData")
load(gene_list)
keytypes(gene_info_db)
keytypes(org.Mm.eg.db)
#' Plot multiple PFPs.
#'
#' Function for visualization multiple PFPs.
#'
#' @param object, \code{PFP} a list of PFP.
#' @param l_size, line size of plot, default is 0.5.
#' @aliases plot_PFPlist
#' @seealso \code{\link{PFP-class}}
#' @example
#' \dontrun{
load("/home/zx/文档/PFP/RData/PFP_test.RData")
#' pfp <- PFP
#' pfp_list <- list(a=pfp)
#' plot_PFPlist(pfp_list)
#' }
#' @export
plot_PFPlist <- function(object, l_size = 0.5){
if (class(object) != 'list')
stop('object must be a PFP list while visualization of multiple pfps')
pfp_num <- length(object)
pfp_score <- llply(object, function(object)pathways_score(object)[["PFP_score"]]) %>% do.call(what = cbind) %>%
as.data.frame
network_num <- nrow(pfp_score)
sim_df <- data.frame(pfp_score,refnet_index = 1:network_num) %>%
gather(net,sim,-refnet_index)
p <- ggplot(data = sim_df, aes(x = refnet_index, y =sim)) +
geom_line(aes(color = net),size = l_size) +
ylab('Pathway fingerprint') + xlab('Index of basic Pathways') +
guides(color = guide_legend("query network"))
print(p)
}
#' Plot multiple PFPs.
#'
#' Function for visualization multiple PFPs.
#'
#' @param object, \code{PFP} a list of PFP.
#' @param l_size, line size of plot, default is 0.5.
#' @aliases plot_PFPlist
#' @seealso \code{\link{PFP-class}}
#' @example
#' \dontrun{
load("/home/zx/文档/PFP/RData/PFP_test.RData")
#' pfp <- PFP
#' pfp_list <- list(a=pfp)
#' plot_PFPlist(pfp_list)
#' }
#' @export
plot_PFPlist <- function(object, l_size = 0.5){
if (class(object) != 'list')
stop('object must be a PFP list while visualization of multiple pfps')
pfp_num <- length(object)
pfp_score <- llply(object, function(object)pathways_score(object)[["PFP_score"]]) %>% do.call(what = cbind) %>%
as.data.frame
network_num <- nrow(pfp_score)
sim_df <- data.frame(pfp_score,refnet_index = 1:network_num) %>%
gather(net,sim,-refnet_index)
p <- ggplot(data = sim_df, aes(x = refnet_index, y =sim)) +
geom_line(aes(color = net),size = l_size) +
ylab('Pathway fingerprint') + xlab('Index of basic Pathways') +
guides(color = guide_legend("query network"))
print(p)
}
load("/home/zx/文档/kangqichuang/PFP/data/PFP_test.RData")
View(PFP_test)
library("devtools")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(PFP)
library(PFP)
devtools::document()
library(PFP)
library(PFP)
devtools::document()
library(PFP)
library(PFP)
devtools::document()
devtools::document()
devtools::document()
library(PFP)
devtools::document()
library(PFP)
devtools::document()
library(PFP)
devtools::document()
library(PFP)
devtools::document()
library(PFP)
devtools::document()
devtools::document()
devtools::document()
library(PFP)
